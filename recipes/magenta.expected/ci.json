[
  {
    "cmd": [],
    "name": "ensure_jiri"
  },
  {
    "cmd": [
      "cipd",
      "ensure",
      "--root",
      "[START_DIR]/cipd/jiri",
      "--list",
      "fuchsia/tools/jiri/linux-amd64 latest",
      "--json-output",
      "/path/to/tmp/json"
    ],
    "name": "ensure_jiri.ensure_installed",
    "~followup_annotations": [
      "@@@STEP_NEST_LEVEL@1@@@",
      "@@@STEP_LOG_LINE@json.output@{@@@",
      "@@@STEP_LOG_LINE@json.output@  \"result\": [@@@",
      "@@@STEP_LOG_LINE@json.output@    {@@@",
      "@@@STEP_LOG_LINE@json.output@      \"instance_id\": \"resolved-instance_id-of-latest----------\", @@@",
      "@@@STEP_LOG_LINE@json.output@      \"package\": \"fuchsia/tools/jiri/linux-amd64\"@@@",
      "@@@STEP_LOG_LINE@json.output@    }@@@",
      "@@@STEP_LOG_LINE@json.output@  ]@@@",
      "@@@STEP_LOG_LINE@json.output@}@@@",
      "@@@STEP_LOG_END@json.output@@@"
    ]
  },
  {
    "cmd": [
      "[START_DIR]/cipd/jiri/jiri",
      "init",
      "-cache",
      "[CACHE]/git"
    ],
    "name": "jiri init"
  },
  {
    "cmd": [
      "[START_DIR]/cipd/jiri/jiri",
      "import",
      "magenta",
      "https://fuchsia.googlesource.com/manifest"
    ],
    "name": "jiri import"
  },
  {
    "cmd": [
      "[START_DIR]/cipd/jiri/jiri",
      "update",
      "-autoupdate=false"
    ],
    "name": "jiri update"
  },
  {
    "cmd": [
      "[START_DIR]/cipd/jiri/jiri",
      "snapshot",
      "/path/to/tmp/"
    ],
    "name": "jiri snapshot",
    "~followup_annotations": [
      "@@@STEP_LOG_LINE@jiri.snapshot@@@@",
      "@@@STEP_LOG_LINE@jiri.snapshot@<manifest>@@@",
      "@@@STEP_LOG_LINE@jiri.snapshot@  <projects>@@@",
      "@@@STEP_LOG_LINE@jiri.snapshot@    <project name=\"manifest\" path=\"manifest\" remote=\"https://fuchsia.googlesource.com/manifest\" revision=\"4c2b0da3c06341db5cebe4d02c78c93c3b2bd78b\"/>@@@",
      "@@@STEP_LOG_LINE@jiri.snapshot@  </projects>@@@",
      "@@@STEP_LOG_LINE@jiri.snapshot@</manifest>@@@",
      "@@@STEP_LOG_END@jiri.snapshot@@@"
    ]
  },
  {
    "cmd": [
      "python",
      "-u",
      "\nimport sys, os\npath = sys.argv[1]\nmode = int(sys.argv[2])\nif not os.path.isdir(path):\n  if os.path.exists(path):\n    print \"%s exists but is not a dir\" % path\n    sys.exit(1)\n  os.makedirs(path, mode)\n",
      "[TMP_BASE]/magenta_tmp",
      "511"
    ],
    "name": "makedirs tmp",
    "~followup_annotations": [
      "@@@STEP_LOG_LINE@python.inline@@@@",
      "@@@STEP_LOG_LINE@python.inline@import sys, os@@@",
      "@@@STEP_LOG_LINE@python.inline@path = sys.argv[1]@@@",
      "@@@STEP_LOG_LINE@python.inline@mode = int(sys.argv[2])@@@",
      "@@@STEP_LOG_LINE@python.inline@if not os.path.isdir(path):@@@",
      "@@@STEP_LOG_LINE@python.inline@  if os.path.exists(path):@@@",
      "@@@STEP_LOG_LINE@python.inline@    print \"%s exists but is not a dir\" % path@@@",
      "@@@STEP_LOG_LINE@python.inline@    sys.exit(1)@@@",
      "@@@STEP_LOG_LINE@python.inline@  os.makedirs(path, mode)@@@",
      "@@@STEP_LOG_END@python.inline@@@"
    ]
  },
  {
    "cmd": [
      "python",
      "-u",
      "\nimport shutil\nimport sys\nshutil.copy(sys.argv[1], sys.argv[2])\n",
      "msleep 500\nruntests\nmsleep 250\ndm poweroff",
      "[TMP_BASE]/magenta_tmp/autorun"
    ],
    "name": "write autorun"
  },
  {
    "cmd": [
      "make",
      "-j2",
      "magenta-pc-x86-64"
    ],
    "cwd": "[START_DIR]/magenta",
    "env": {
      "USER_AUTORUN": "[TMP_BASE]/magenta_tmp/autorun"
    },
    "name": "build"
  },
  {
    "cmd": [],
    "name": "ensure_qemu"
  },
  {
    "cmd": [
      "cipd",
      "ensure",
      "--root",
      "[START_DIR]/cipd/qemu",
      "--list",
      "fuchsia/tools/qemu/linux-amd64 latest",
      "--json-output",
      "/path/to/tmp/json"
    ],
    "name": "ensure_qemu.ensure_installed",
    "~followup_annotations": [
      "@@@STEP_NEST_LEVEL@1@@@",
      "@@@STEP_LOG_LINE@json.output@{@@@",
      "@@@STEP_LOG_LINE@json.output@  \"result\": [@@@",
      "@@@STEP_LOG_LINE@json.output@    {@@@",
      "@@@STEP_LOG_LINE@json.output@      \"instance_id\": \"resolved-instance_id-of-latest----------\", @@@",
      "@@@STEP_LOG_LINE@json.output@      \"package\": \"fuchsia/tools/qemu/linux-amd64\"@@@",
      "@@@STEP_LOG_LINE@json.output@    }@@@",
      "@@@STEP_LOG_LINE@json.output@  ]@@@",
      "@@@STEP_LOG_LINE@json.output@}@@@",
      "@@@STEP_LOG_END@json.output@@@"
    ]
  },
  {
    "cmd": [
      "python",
      "-u",
      "\nimport os\nimport platform\nimport sys\nprint platform.processor() == sys.argv[1] and os.path.exists('/dev/kvm')\n",
      "x86_64"
    ],
    "name": "check if kvm is supported",
    "stdout": "/path/to/tmp/"
  },
  {
    "cmd": [
      "[START_DIR]/cipd/qemu/bin/qemu-system-x86_64",
      "-nographic",
      "-m",
      "2048",
      "-smp",
      "4",
      "-machine",
      "q35",
      "-kernel",
      "[START_DIR]/magenta/build-magenta-pc-x86-64/magenta.bin",
      "-enable-kvm",
      "-cpu",
      "host",
      "-initrd",
      "[START_DIR]/magenta/build-magenta-pc-x86-64/bootdata.bin",
      "-append",
      "TERM=vt100"
    ],
    "name": "test",
    "stderr": "/path/to/tmp/",
    "stdout": "/path/to/tmp/",
    "timeout": 300,
    "~followup_annotations": [
      "@@@STEP_LOG_LINE@qemu.stdout@SUMMARY: Ran 2 tests: 1 failed@@@",
      "@@@STEP_LOG_END@qemu.stdout@@@",
      "@@@STEP_FAILURE@@@"
    ]
  },
  {
    "name": "$result",
    "reason": "SUMMARY: Ran 2 tests: 1 failed",
    "recipe_result": null,
    "status_code": 1
  }
]